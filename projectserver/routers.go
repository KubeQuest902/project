/*
 * Sample project for KubeQuest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package projectserver

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name                string
	Method              string
	Pattern             string
	HandlerFunc         http.HandlerFunc
	RequiredPermissions []string
}

type Routes []Route

func renderIndexPage(w http.ResponseWriter, r *http.Request) {
	log.Println("Current working directory:", http.Dir("."))
	log.Println("Attempting to load template from /app/web/index.html")

	tmpl := template.Must(template.ParseFiles("./web/index.html"))
	if err := tmpl.Execute(w, nil); err != nil {
		log.Printf("Error rendering template: %v", err)
		http.Error(w, "Error rendering template", http.StatusInternalServerError)
	}
}

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true).UseEncodedPath()

	router.HandleFunc("/", renderIndexPage).Methods("GET")
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./web"))))

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)
		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
		continue
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	fmt.Fprintf(w, "{\"name\": \"Sample project for KubeQuest\",\"version\": \"1.0.0\"}")
	w.WriteHeader(http.StatusOK)
}

func Healthz(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/",
		Index,
		[]string{},
	},

	Route{
		"Healthz",
		"GET",
		"/healthz",
		Healthz,
		[]string{},
	},

	Route{
		"GetLike",
		strings.ToUpper("Get"),
		"/api/like",
		GetLike,
		[]string{},
	},

	Route{
		"PostLike",
		strings.ToUpper("Post"),
		"/api/like",
		PostLike,
		[]string{},
	},

	Route{
		"ResetCounter",
		strings.ToUpper("Delete"),
		"/api/reset",
		ResetCounter,
		[]string{},
	},
}

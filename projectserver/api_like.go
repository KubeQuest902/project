/*
 * Sample project for KubeQuest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package projectserver

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"

	models "github.com/KubeQuest902/project/models"
	"github.com/mediocregopher/radix/v3"
)

func GetLike(w http.ResponseWriter, r *http.Request) {
	var dogCnt int64
	var catCnt int64

	err := RedisPool.Do(radix.Cmd(&dogCnt, "GET", "counter:dog"))
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		writeStandardResponse(r, w, "Error getting dog counter")
		return
	}

	err = RedisPool.Do(radix.Cmd(&catCnt, "GET", "counter:cat"))
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		writeStandardResponse(r, w, "Error getting cat counter")
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	response, _ := json.Marshal(&models.LikeResponse{
		Dog: dogCnt,
		Cat: catCnt,
	})
	log.Printf("Response: %+v", string(response))
	w.Write(response)
}

func PostLike(w http.ResponseWriter, r *http.Request) {
	animal := r.FormValue("animal")
	if len(animal) == 0 {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		writeStandardResponse(r, w, "Parameter 'animal' is required")
		return
	}
	if !strings.EqualFold(animal, "cat") && !strings.EqualFold(animal, "dog") {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		writeStandardResponse(r, w, "Parameter 'animal' must be 'cat' or 'dog'")
		return
	}

	animal = strings.ToLower(animal)
	err := RedisPool.Do(radix.FlatCmd(nil, "INCR", "counter:"+animal))
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		writeStandardResponse(r, w, "Error setting counter")
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	response, _ := json.Marshal(&models.Response{
		Message: fmt.Sprintf("%s has been liked", animal),
	})
	w.Write(response)
}
